# -*- coding: utf-8 -*-
"""Elnshaer_api.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AZT5hMLM_zBgk0mZ37sHeUbnn7pfuR_a
"""

import json
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np
from fastapi import FastAPI

app = FastAPI()

# Load the KNN model from disk
with open('knn_model (2).sav', 'rb') as file:
    loadded_model = pickle.load(file)
# Load the Label Encoder from the saved file
with open('label_encoder.pkl', 'rb') as file:
    loadded_encoder = pickle.load(file)

from sklearn import preprocessing
  
# label_encoder object knows how to understand word labels.
label_encoder = preprocessing.LabelEncoder()




class MyObject:
    def __init__(self, longitude, Latitude, Country,Governorate,distance):
        self.longitude = longitude
        self.Latitude = Latitude
        self.Country = Country
        self.Governorate = Governorate
        self.distance = distance


# Define the prediction endpoint
@app.post("/prediction")
def predict(l1: float, l2: float,curr: int):
    # Make a prediction using the KNN model
    result=loadded_model.predict(np.array([l1,l2]).reshape(1, -1))
    result=loadded_encoder.inverse_transform([result])[0]
    print (result)
    df = pd.read_csv('geocode.csv')
    df_copy = df.copy()
    df_copy.drop([16357, 112805, 20868, 99371, 38292, 10915, 1069, 112757, 51756, 76645, 75828, 89323, 136098, 86223, 14701, 135695, 53006], axis=0, inplace=True)
    df_copy = df_copy.dropna()
    output_knn = df_copy[df_copy['y'] == result]
    print (output_knn)
    output_knn['diff'] = ((abs(output_knn['x1'] - l1) + abs(output_knn['x2'] - l2))*60)*1.1515
    sorted_df = output_knn.sort_values('diff')
    print (sorted_df)
    the_nearst_list=[]
    for index in range(0,len(sorted_df['x1'])):
      nearest_index = sorted_df.index[index]
      nearest_value=list(sorted_df.iloc[index])
      obj = MyObject(nearest_value[0], nearest_value[1], nearest_value[2],nearest_value[3],nearest_value[4]) 
      the_nearst_list.append(obj)
      

    return  the_nearst_list[curr]










